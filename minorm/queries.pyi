from typing import Any, List, Optional, Sequence

from minorm.db_specs import BaseSpec
from minorm.expressions import WhereCondition, JoinExpression, OrderByExpression

class DDLQuery:
    table_name: str = ...
    params: Sequence[Any] = ...
    def __init__(self, table_name: str, params: Sequence[Any] = ...) -> None: ...
    def render_sql(self) -> str: ...

class CreateTableQuery(DDLQuery):
    TEMPLATE: str = ...
    def render_sql(self) -> str: ...

class DropTableQuery(DDLQuery):
    TEMPLATE: str = ...
    def render_sql(self) -> str: ...

class DMLQuery:
    table_name: str = ...
    fields: Sequence[str] = ...
    _where: Optional[WhereCondition] = ...
    _limit: Optional[int] = ...
    def __init__(self, table_name: str, fields: Sequence[str] = ..., where: Optional[WhereCondition] = ..., limit: Optional[int] = ...) -> None: ...
    def where(self, expr: WhereCondition): ...
    def limit(self, value: int): ...
    def render_sql(self, db_spec: BaseSpec) -> str: ...

class InsertQuery(DMLQuery):
    def render_sql(self, db_spec: BaseSpec): ...

class UpdateQuery(DMLQuery):
    def render_sql(self, db_spec: BaseSpec): ...

class DeleteQuery(DMLQuery):
    def render_sql(self, db_spec: BaseSpec): ...

class SelectQuery(DMLQuery):
    _joins: List[JoinExpression] = ...
    _order_by: Optional[OrderByExpression] = ...
    def __init__(self, table_name: str, fields: Sequence[str] = ..., where: Optional[WhereCondition] = ...) -> None: ...
    def render_sql(self, db_spec: BaseSpec) -> str: ...
    def join(self, join_expression: JoinExpression): ...
    def order_by(self, order_expression: OrderByExpression): ...
