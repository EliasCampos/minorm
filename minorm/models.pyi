from typing import Any, Dict, List, NamedTuple, Type, Tuple

from minorm.connectors import Connector
from minorm.exceptions import DoesNotExists as ModelDoesNotExists
from minorm.fields import Field, ForeignKey
from minorm.managers import QuerySet


class ModelSetupError(Exception): ...

class ModelOptions:
    _model_name: str = ...
    _db: Connector = ...
    _table_name: str = ...
    _fields: List[Field] = ...
    def __init__(self, model_name: str, db: Connector, table_name: str, fields: List[Field]) -> None: ...
    @property
    def db(self) -> Connector: ...
    @property
    def table_name(self) -> str: ...
    @property
    def fields(self) -> List[Field]: ...
    @property
    def pk_field(self) -> Field: ...
    @property
    def name(self) -> str: ...
    @property
    def column_names(self) -> List[str]: ...
    def check_field(self, field_name: str, with_pk: bool = ...) -> Field: ...
    def get_field(self, field_name: str) -> Field: ...
    def get_fk_field(self, field_name: str) -> ForeignKey: ...

class ModelMetaclass(type):
    _meta: ModelOptions = ...
    _queryset_class: Type[QuerySet] = ...
    class DoesNotExists(ModelDoesNotExists): ...
    query_namedtuple: Type[NamedTuple] = ...
    def __new__(cls, name: str, bases: Tuple[type], namespace: Dict[str, Any]): ...
    @property
    def qs(cls) -> QuerySet: ...
    def render_sql(cls) -> str: ...
    def create_table(cls) -> None: ...
    def drop_table(cls) -> None: ...

class Model(metaclass=ModelMetaclass):
    qs: QuerySet
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def pk(self) -> Any: ...
    def save(self) -> None: ...
    def refresh_from_db(self) -> None: ...
    def delete(self) -> int: ...
    def _adapt_values(self) -> None: ...
