from typing import Any, Optional, Tuple

class BaseSpec:
    VALUE_ESCAPE: Optional[str] = ...
    AUTO_FIELD_TYPE: Optional[str] = ...
    AUTO_FIELD_CONSTRAINS: Tuple[str] = ...
    connection_url: str = ...
    db_driver: Any = ...
    def __init__(self, connection_url: str) -> None: ...
    def prepare_db_driver(self) -> Any: ...
    def set_autocommit(self, connection: Any, autocommit: bool) -> None: ...
    def create_connection(self) -> Any: ...
    @property
    def value_escape(self) -> str: ...
    @property
    def auto_field_type(self) -> str: ...
    @property
    def auto_field_constrains(self) -> Tuple[str]: ...

class SQLiteSpec(BaseSpec):
    VALUE_ESCAPE: str = ...
    AUTO_FIELD_TYPE: str = ...
    AUTO_FIELD_CONSTRAINS: Any = ...
    def prepare_db_driver(self) -> Any: ...
    def create_connection(self) -> Any: ...
    def set_autocommit(self, connection: Any, autocommit: bool) -> None: ...

class PostgreSQLSpec(BaseSpec):
    VALUE_ESCAPE: str = ...
    AUTO_FIELD_TYPE: str = ...
    def prepare_db_driver(self) -> Any: ...
    def set_autocommit(self, connection: Any, autocommit: bool) -> None: ...
